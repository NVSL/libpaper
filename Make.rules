#-*- makefile -*-
ALL=pdf
OS=$(shell uname -s)
TAR=tar

GENERATED_TEX+=libpaper_metadata.tex

TEX_FILES+=$(wildcard *.tex *.sty libpaper/*.tex libpaper/*.sty libpaper/*.cls libpaper/*/*.cls) $(GENERATED_TEX)
FIGS+=$(shell find ./Figures -name '*.pdf' -o -name '*.jpg' -o -name '*.png')
GRAPHS+=$(shell find ./Graphs -name '*.pdf' -o -name '*.jpg' -o -name '*.png')
DATA+=$(wildcard ./Data/*.csv)

# FIGS+= $(shell find ./Figures -name '*.pdf') $(shell find ./Figures -name '*.jpg')

LIBPAPER_BIN='./libpaper/bin/'

ALL_INPUTS=$(TEX_FILES) $(FIGS) $(GRAPHS)

PDFLATEX_BATCH_OPTIONS=-interaction=errorstopmode -halt-on-error $(EXTRA_TEX_OPTIONS)

PANDOC=pandoc

PDF_TARGETS ?= paper.pdf
TEX_TARGETS = $(patsubst %.pdf,%.tex,$(PDF_TARGETS))
# Note that if there is more than one target, the rest won't get built - JI

GENERATED+=$(PDF_TARGETS) $(GENERATED_TEX)

ARXIV_INPUTS=$(ALL_INPUTS) 00README.XXX

PDFLATEX=TEXINPUTS=./:./libpaper//: pdflatex

.PHONY: test_build clean

all: check check_repo $(ALL)
default: all

# This is aux instead of pdf because we need these before we run latex the first time
paper.aux:  $(TEX_FILES) $(GRAPHS) $(FIGS) Makefile libpaper/common.bib paper.bib

.PHONY: check_repo
check_repo:
	(cd $(LIBPAPER_BIN); ./check_repo)


.PHONY: wc
wc:
	@if ! which -s $(PANDOC); then echo You need to install $(PANDOC);  false; fi;
	@$(PANDOC)  $(TEX_TARGETS)  -w plain -o - |wc

singlefile.tex: $(filter-out singlefile.tex,$(TEX_FILES))
	echo "" > singlefile.tex
	while read line; do if [ "`echo $$line | grep '^\\input{' | tr '{' ' ' | tr '}' ' ' | awk '{print $$2}'`" == "" ]; then echo $$line >> singlefile.tex; else cat `echo $$line | grep '^\\input{' | tr '{' ' ' | tr '}' ' ' | awk '{print $$2}'`.tex >> singlefile.tex; fi; done < paper.tex

.PHONY: test
test:
	rm -rf /tmp/test_build
	git clone . /tmp/test_build -b $$(git rev-parse --abbrev-ref HEAD) # checkout and test the current branch
	git clone ./libpaper/ /tmp/test_build/libpaper -b $$(cd libpaper; git rev-parse --abbrev-ref HEAD) # for libpaper too.
	(cd /tmp/test_build; $(MAKE))

.PHONY: pdf
pdf: $(PDF_TARGETS)

%.pdf : %.tex $(TEX_FILES)
	latexmk -pdf -pdflatex="$(PDFLATEX) $(PDFLATEX_BATCH_OPTIONS)" -use-make $*

%.docx: $(TEX_FILES)
	$(PANDOC) $*.tex -w docx -o $@

TEMP_DIR=/tmp/$(shell basename $(CURDIR))

%.grammarly.txt: $(TEX_FILES)
	rm -rf $(TEMP_DIR)
	mkdir -p $(TEMP_DIR)
	$(TAR) cf - $(ALL_INPUTS) paper.bbl | (cd $(TEMP_DIR); $(TAR) xf -)
	(cd $(TEMP_DIR); for i in $$(find . -name '*.tex'); do mv $$i $$i.bak; perl -ne 's/\~\\(footnote|cite)/\\$$1/g;print;' < $$i.bak > $$i;done)
	(cd $(TEMP_DIR); $(PANDOC) $*.tex -w plain -o - --wrap=none) > $@

%.txt: $(TEX_FILES)
	$(PANDOC) $*.tex -w plain -o $@ 

#%%-strip.tex:  $(TEX_FILES)
#	$(PANDOC) $*.tex -w latex -o $@

.PHONY: libpaper_metadata.tex
libpaper_metadata.tex:
	$(LIBPAPER_BIN)/check_release > $@ || true

.PHONY: release
release: $(patsubst %.pdf,%-release.pdf,$(PDF_TARGETS))


%-release.pdf:
	@if $(LIBPAPER_BIN)/check_release > /dev/null; then $(MAKE) default; else echo "Commit changes first"; false ;fi
	mv $*.pdf $@	

ARXIV_NAME=$(shell basename $(CURDIR))-arxiv

.PHONY: .gitignore
.gitignore:
	if ! [ -e .gitignore ]; then touch .gitignore; git add .gitignore; fi
	(cat .gitignore; echo $(GENERATED) | perl -ne 's/ /\n/g;print' | sort |uniq) > .gitignore.new; mv .gitignore.new .gitignore

.PHONY: arxiv
arxiv: paper-arxiv.tgz
	mv paper-arxiv.tgz $(ARXIV_NAME).tgz

.PHONY: 
%-arxiv.tgz:  %.bbl $(TEX_FILES)
	rm -rf $*-arxiv
	mkdir -p $*-arxiv
	$(TAR) cf - $(TEX_FILES) $< | (cd $*-arxiv; $(TAR) xf -)
	(cd $*-arxiv; for i in $$(find . -name '*.tex'); do mv $$i $$i.bak; perl -pe 's/(^|[^\\])%.*/\1%/' < $$i.bak > $$i; rm $$i.bak; done)
	# copy over figs,graphs
	(grep -q IncludeInArxiv $*.log && cat $*.log | awk -F"[ ',]+" '/IncludeInArxiv:/{print $$2}' | $(TAR) cf - -T -| (cd $*-arxiv; $(TAR) xf -) ) || true
	# copy over data
	(grep -q ArxivData $*.log && mkdir -p $*-arxiv/anc && cat $*.log | awk -F"[ ',]+" '/ArxivData:/{print $$2}' | $(TAR) cf - -T -| (cd $*-arxiv/anc; $(TAR) xf -)  ) || true
	(cd $*-arxiv;  $(PDFLATEX) "\def\arxivbuild{}\input{$(TEX_TARGETS)}";  $(PDFLATEX) "\def\arxivbuild{}\input{$(TEX_TARGETS)}"; $(PDFLATEX) "\def\arxivbuild{}\input{$(TEX_TARGETS)}";)
	(cd $*-arxiv && rm -rf *.aux *.log *.blg *.out *.toc;)
	$(TAR) czf $@ $*-arxiv

.PHONY: clean
clean:
	rm -rf *.aux *.log *.bbl *.blg *.out *.toc
	rm -rf paper_abbrv.bib 
	rm -rf _test_build
	rm -rf $(GENERATED)
	latexmk -CA

.PHONY: check
check:
	@if ! [ -d libpaper/.git ]; then echo "Your libpaper is not in its own git repo.  You _should_not_ include the contents of libpaper in your paper directory.  You should checkout libpaper, so the improvement you make will be available to other students"; false; fi

.PHONY: git-hooks
git-hooks:
	git config core.hooksPath libpaper/git_hooks
