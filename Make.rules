MY_DATE := $(strip $(shell date +"%F_%H_%M_%S"))
LATEXDIFF=./latexdiff-so

ifeq ($(OS),Windows_NT)
$(warning Windows NT detected "$(USER)")
DVI = yap
DVIBIN = yap
DISTILL = "$(HOME)"/bin/acrodist.exe

PREFIX=c:\\cygwin\\home\\$(USER)\\papers\\2008SASP-arsenal\\
ACROREAD = "$(HOME)"/bin/acroread.exe
ALL = show_nt
else # mac

ifeq ($(USER),mbt)
ALL = show_nt
ACROREAD = kpdf
else
ALL =  pdf
endif

endif


TEX_FILES+=$(wildcard *.tex *.sty libpaper/*.tex libpaper/*.sty libpaper/*/*.cls) libpaper_metadata.tex
FIGS+=$(wildcard Figures/*.pdf)
GRAPHS+=$(wildcard Graphs/*.pdf)

ARXIV_FILES=$(TEX_FILES) $(FIGS) $(GRAPHS) 00README.XXX

PDFLATEX_BATCH_OPTIONS=-interaction=errorstopmode

PANDOC=pandoc

PDF_TARGETS ?= paper.pdf
TEX_TARGETS = $(patsubst %.pdf,%.tex,$(PDF_TARGETS))

PDFLATEX=TEXINPUTS=./:./libpaper//: pdflatex

.PHONY: test_build clean

all: check $(ALL)
default: all

paper.pdf:  $(TEX_FILES) $(GRAPHS) $(FIGS) Makefile libpaper/common.bib paper.bib

.PHONY: wc
wc:
	@if ! which -s $(PANDOC); then echo You need to install $(PANDOC);  false; fi;
	@$(PANDOC)  $(TEX_TARGETS)  -w plain -o - |wc

singlefile.tex: $(filter-out singlefile.tex,$(TEX_FILES))
	echo "" > singlefile.tex
	while read line; do if [ "`echo $$line | grep '^\\input{' | tr '{' ' ' | tr '}' ' ' | awk '{print $$2}'`" == "" ]; then echo $$line >> singlefile.tex; else cat `echo $$line | grep '^\\input{' | tr '{' ' ' | tr '}' ' ' | awk '{print $$2}'`.tex >> singlefile.tex; fi; done < paper.tex

.PHONY: test
test:
	rm -rf .test_build
	git clone . ./.test_build
	git clone libpaper ./.test_build/libpaper
	(cd .test_build; make paper.pdf; open paper.pdf || true)

pdf: $(PDF_TARGETS)

%.aux : %.tex $(TEX_FILES)
	$(PDFLATEX) $(PDFLATEX_BATCH_OPTIONS) $* 

%.bbl : %.aux 
	bibtex $* || true

%.pdf : %.bbl
	$(PDFLATEX) $(PDFLATEX_BATCH_OPTIONS) $*
	$(PDFLATEX) $(PDFLATEX_BATCH_OPTIONS) $*

%.docx: $(TEX_FILES)
	$(PANDOC) $*.tex -w docx -o $@

TEMP_DIR=/tmp/$(shell basename $(CURDIR))

%.grammarly.txt: $(TEX_FILES)
	rm -rf $(TEMP_DIR)
	mkdir -p $(TEMP_DIR)
	tar cf - $(ARXIV_FILES) paper.bbl | (cd $(TEMP_DIR); tar xf -)
	(cd $(TEMP_DIR); for i in $$(find . -name '*.tex'); do mv $$i $$i.bak; perl -ne 's/\~\\(footnote|cite)/\\$$1/g;print;' < $$i.bak > $$i;done)
	(cd $(TEMP_DIR); $(PANDOC) $*.tex -w plain -o - --wrap=none) > $@

%.txt: $(TEX_FILES)
	$(PANDOC) $*.tex -w plain -o $@ 

#%%-strip.tex:  $(TEX_FILES)
#	$(PANDOC) $*.tex -w latex -o $@

.PHONY: libpaper_metadata.tex
libpaper_metadata.tex:
	check_release > $@ || true

.PHONY: release
release:
	@if check_release; $(MAKE) default; else echo Committed changes first;fi

ARXIV_NAME=$(shell basename $(CURDIR))-arxiv

.PHONY: arxiv
arxiv: $(TEX_FILES) paper.bbl
	rm -rf $(ARXIV_NAME)
	mkdir -p $(ARXIV_NAME)
	tar cf - $(ARXIV_FILES) paper.bbl | (cd $(ARXIV_NAME); tar xf -)
	(cd $(ARXIV_NAME); for i in $$(find . -name '*.tex'); do mv $$i $$i.bak; perl -pe 's/(^|[^\\])%.*/\1%/' < $$i.bak > $$i; rm $$i.bak; done)
	(cd $(ARXIV_NAME);  $(PDFLATEX) $(TEX_TARGETS);  $(PDFLATEX) $(TEX_TARGETS); )
	tar czf $(ARXIV_NAME).tgz $(ARXIV_NAME)

.PHONY: clean
clean:
	rm -rf *.aux *.log *.bbl *.blg *.out $(PDF_TARGETS)
	rm -rf paper_abbrv.bib 
	rm -rf _test_build

.PHONY: check
check:
	@if ! [ -d libpaper/.git ]; then echo "Your libpaper is not in its own git repo.  You _should_not_ include the contents of libpaper in your paper directory.  You should checkout libpaper, so the improvement you make will be available to other students"; false; fi
