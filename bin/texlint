#!/usr/bin/env python3

import argparse
import sys
import logging as log
import subprocess
import inspect
import re
import collections

class Alt():
    def __init__(self, pattern, instead, pretty_pattern=None, reflags=re.IGNORECASE):
        self.pattern = pattern
        self.instead = instead
        self.pretty_pattern = pretty_pattern if pretty_pattern else pattern
        self.reflags=reflags


class Check(object):
    def __init__(self, filename, name):
        self.filename = filename
        self.line_number = 0
        self.found_error = False 
        self.name = name

    def check_line(self, l, skip=False):
        self.line_number += 1
        if not skip:
            self.found_error = False
            self.do_check(l)
            return not self.found_error
        else:
            log.debug(f"Skipped {self.name} check on {self.line_spec()}: {l}")
            return True

    def check_eof(self, skip=False):
        if not skip:
            self.found_error = False
            self.do_check_eof()
            return not self.found_error
        else:
            log.debug(f"Skipped {self.name} check at eof")
            return True

    def do_check_eof(self):
        pass
    
    def do_check(self, l):
        pass

    def line_spec(self):
        return f"{self.filename}:{self.line_number}"

    def fmt_error(self, s, line):
        return f"({self.name})  {s}\n\t{self.line_spec()}: {line.strip()}"

    def error(self, s, line, *args, **kwargs):
        log.error(self.fmt_error(s, line), *args, **kwargs)
        self.found_error = True

    def warn(self, s, line, *args, **kwargs):
        log.warn(self.fmt_error(s, line),*args, **kwargs)
        self.found_error = True

    def info(self, s, line, *args, **kwargs):
        log.info(self.fmt_error(s, line), *args, **kwargs)

    def debug(self, s, line, *args, **kwargs):
        log.debug(self.fmt_error(s, line), *args, **kwargs)

    def success(self):
        return not self.found_error

class check_SIUnits(Check):

    def __init__(self, *args, **kwargs):
        super(check_SIUnits, self).__init__(*args, **kwargs)

        self.si_units = ["kB",
                    "MB",
                    "GB[^E]",
                    "TB",
                    "MHz",
                    "GHz",
                    "kHz",
                    "ns",
                    "ms",
                    "us\{\}"]
        self.forbidden_units = [
            "\$\\\\mu\$s",
            "us\W"]

        self.si_unit_lax_pattern = "|".join(map(lambda x: f"\d[ \~]?{x.upper()}", self.si_units))
        self.si_unit_strict_pattern = "|".join(map(lambda x: f"\d~{x}", self.si_units))
        log.debug(f"strict pattern = {self.si_unit_strict_pattern}")
        log.debug(f"lax pattern = {self.si_unit_lax_pattern}")
        
        
    def do_check(self, l):
        
        def strict(x):
            return f"\d+~{x}"
        def lax(x):
            return f"\d+[ \~]*{x.upper()}"

        for p in self.si_units:
            for m in re.findall(lax(p), l, flags=re.IGNORECASE):
                log.debug(f"Found match in {l}: '{m}'")
                if not re.match(strict(p), m):
                    self.error(f"Poorly formatted unit: {m}.  Should be '<number>~{p}'.",
                               line=l)
            
        for p in self.forbidden_units:
            for m in re.findall(lax(p), l, flags=re.IGNORECASE):
                self.error(f"Don't use '{m}'.  Use a \\us{{}}, instead.",
                           line=l)

class check_floats(Check):
    def __init__(self, *args, **kwargs):
        super(check_floats, self).__init__(*args, **kwargs)

    def do_check(self, l):
        if re.search("\\\\begin\{(table|float|figure)\*?\}\[.*\]", l):
            self.error("Don't use [] directives to force the position of floats until submission or camera time.", l)
            
class check_macros(Check):
    def __init__(self, *args, **kwargs):
        super(check_macros, self).__init__(*args, **kwargs)
        
    def do_check(self, l):
        def use_macro(n, m=None ):
            return Alt(f"(\s|^|{{){n}([^\w\-\\\\]|\()", f"\\{m if m else n}", pretty_pattern=n)

        for p in (list(map(use_macro, ["malloc",
                                       "clflush",
                                       "clwb",
                                       "fdatasync",
                                       "fsync",
                                       "ioctl",
                                       "memcpy",
                                       "memset",
                                       "mfence",
                                       "sfence",
                                       "mmap",
                                       "msync",
                                       "munmap",
                                       "nova",
                                       "pread",
                                       "preadv",
                                       "pwrite",
                                       "pwritev",
                                       "readv",
                                       "writev",
                                       "xfs",
                                       # "free", # Jian: too many false positives
                                       "xfsDAX"])) +
                  [use_macro("ext4-dax", "extfsDAX"),
                   use_macro("ext4", "extfs"),
                   use_macro("xfs-dax", "xfsDAX")] +
                  [Alt("(Figure|Fig|Table|Listing|Algorithm|Equation|Appendix|Section)[\s\~]*\\\\ref\{", "\\ref<something>{}")]):
            if re.search(p.pattern, l, flags=p.reflags):
                self.error(f"Use '{p.instead}{{}}' in place of '{p.pretty_pattern}'.", line=l)

class check_Misc(Check):
    def __init__(self, *args, **kwargs):
        super(check_Misc, self).__init__(*args, **kwargs)
    
    def do_check(self, l):
        for p in [Alt("let's", "let us"),
                  Alt("can't", "cannot"),
                  Alt("don't", "do not"),
                  Alt("doesn't", "does not"),
                  Alt("wouldn't", "would not"),
                  Alt("we'll", "we will"),
                  #Alt("(\W|^)I[\W$]", "We (or rewrite to avoid 1st person pronouns)", reflags=0),
                  #Alt("you", "remove it"),
                  Alt("couldn't", "could not"),
                  Alt("shouldn't", "should not"),
                  Alt("can not", "cannot"),
                  Alt("it's", "its or it is"),
                  Alt("\$?\\\\times$\?", "\\x{}"),
                  Alt("\d\s*(x|X)", "\\x{}"),
                  Alt("(^|[ \~])\\\\x{}", "\\x{} (no space before \\x{})"),
                  #Alt("\\D\\\\x{}", "<number>\\x{}"),
                  Alt("solid state", "solid-state"),    # Juno: Checking "solid-?state" doesn't allow using solid-state
                  Alt("trade off", "trade-off"),
                  Alt("run-time", "runtime"),
                  Alt("stream-line", "streamline"),
                  Alt("inter-operate", "interoperate"),
                  Alt("as such", "so, therefore, as a result, etc."),
                  Alt("non-trivial", "<don't use this, it's vauge>"),
                  Alt("nontrivial", "<don't use this, it's vauge>"),
                  Alt("[^,]\s+respectively", ", respectively"),
                  Alt("fix[\- ]size|fixed[\- ]sized|fixed-size", "fixed size"),
                  Alt("mmaped", "mmapped"),
                  Alt("key value", "key-value"),
                  Alt("data base", "database"),
                  Alt("syscall", "system call"),
                  Alt("data[ \-]path", "datapath"),
                  Alt("\~\\\\ref[stfal]", "No non-breaking space before \reffig, \refsec, \reftab, etc."),
                  Alt("[^\-\~]\\\\ref\{", "~\ref{}"),
                  Alt("I/O", "IO"),
                  #Alt("non-volatile", "nonvolatile"),
                  Alt("\\\\cite\{[,\s]*\}", "a descriptive dummy citation instead (E.g., '\cite{apaperaboutbtrees}')"),
                  Alt("control-+flow", "control flow"),
                  Alt(">>", "{>}> (to avoid geting double angle quotes in the output)"),
                  Alt("<<", "{<}< (to avoid geting double angle quotes in the output)"),
                  Alt("In a nut ?shell", "Just cut it.  Also summaries after the fact are generally not useful."),
                  Alt("\{\\\\tt", "This is old-style tex. You should at least use \\texttt{}, but probably you want to use another macro like \csym{}."),
                  Alt("[^~]\\\\cite", "~\\cite{} (non-breaking space before \\cite)")
                  ]:
            if re.search(p.pattern, l, flags=p.reflags):
                self.error(f"Forbidden pattern: '{p.pretty_pattern}'.  Use '{p.instead}'", line=l)
                  
#class check_Echo(Check):
#    def check_line(self, l):
                #log.debug(f"Got line: {l.strip()}")

def main(argv):
    parser = argparse.ArgumentParser()
    parser.add_argument("files", nargs="*", default=["paper.pdf"], help="Files to process")
    parser.add_argument('-v', action='store_true', dest="verbose", help="Be verbose")
    parser.add_argument('--permissive', action='store_true', help="Don't report failure")
    parser.add_argument('--expect-failure', action='store_true', help="For testing -- report an error for lines that don't have one and vice versa")
    parser.add_argument('--ignore-files-standard', default="(.*\.cls)|(.*\.sty)", help="Regex of file names to ignore")
    parser.add_argument('--ignore-files', nargs="+", default=[], help="List of additional files to ignore")
    parser.add_argument("--fail-fast", default=False, action='store_true', help="Exit on first error")
    
    cmdline = parser.parse_args(argv)

    log.basicConfig(format="%(levelname)-8s [%(filename)s:%(lineno)d]  %(message)s" if cmdline.verbose else "%(levelname)-8s %(message)s",
                    level=log.DEBUG if cmdline.verbose else log.INFO)
    

    checks = inspect.getmembers(sys.modules[__name__], lambda x : inspect.isclass(x) and "check_" in x.__name__)
    log.debug(f"Found these checks: {checks}")

    success = True
    for f in cmdline.files:
        if re.match(cmdline.ignore_files_standard, f) or f in cmdline.ignore_files:
            log.info(f"Ignoring {f}")
            continue
        log.info(f"Processing {f}")
        checkers = [(name, cls(f, name.replace("check_",""))) for name, cls in checks]

        try:
            with open(f) as t:
                try:
                    lines = t.readlines()
                except UnicodeDecodeError as e:
                    log.error(f"Problem parsing {f}: {e}")
                    found_error = True
                    continue

                pragma_stack = []
                push_mode = False
                
                for l in lines:
                    if push_mode:
                        toks = l.replace("%%pragma", "%% pragma").strip().split(" ")
                        if toks[:-1] == "%% pragma texlint ignored".split(" "):
                            pragma_stack.append(toks[-1])
                        push_mode = False

                    if l.replace("%%pragma", "%% pragma").strip().split(" ") == "%% pragma texlint push".split(" "):
                        push_mode = True

                    if l.replace("%%pragma", "%% pragma").strip().split(" ") == "%% pragma texlint pop".split(" "):
                        del pragma_stack[-1]
                        push_mode = False

                        
                    log.debug(f"Checking '{l.strip()}'")
                    found_error = False
                    for name, check in checkers:
                        if name not in pragma_stack:
                            found_error = found_error or not check.check_line(re.sub("([^\\\\]|^)%.*", "", l),
                                                                              skip=re.search(f"%.*ignore\s+{check.name}",
                                                                                             l,
                                                                                             flags=re.IGNORECASE))
                        else:
                            log.warn(f"Checker '{name}' ignored")
                    if found_error:
                        log.debug("Found some errors")
                    else:
                        log.debug("Found no errors")

                    if cmdline.expect_failure:
                        success = success and found_error
                    else:
                        success = success and not found_error

                    if not success:
                        log.debug("I'm failing now")
                        if cmdline.fail_fast:
                            log.error("Exiting on first error")
                            sys.exit(1)
                    else:
                        log.debug("I'm still succeeding.")
                for name, check in checkers:
                    found_error = check.check_eof()
                    if found_error:
                        log.debug("I'm failing now")
                        if cmdline.fail_fast:
                            log.error("Exiting on first error")
                            sys.exit(1)
                        
        except Exception as e:
            log.error(f"Failed to process {f}: {e}")
            found_error = True
            
    if success or cmdline.permissive:
        if cmdline.expect_failure:
            log.info("Expected error on everyline. Found them.")
        log.debug("Reporting success!")
        sys.exit(0)
    else:
        log.debug("Reporting failure!")
        sys.exit(1)

if __name__ == "__main__":
    main(sys.argv[1:])
